@using BusinessObjects.Models
@model BusinessObjects.Models.DashboardViewModel

@{
	ViewBag.Title = "Admin Dashboard";
	Layout = "~/Views/Shared/_AdminLayout.cshtml";
}

@section Styles {
	<style>
		.custom-header th {
			background-color: #7fad39 !important;
			color: white;
		}

		.truncate-title {
			max-width: 200px;
			white-space: nowrap;
			overflow: hidden;
			text-overflow: ellipsis;
		}

		/* Pagination styling */
		.listPage {
			display: flex;
			justify-content: center;
			list-style: none;
			padding: 0;
			margin: 30px 0;
		}

			.listPage li {
				margin: 0 5px;
				display: inline-block;
			}

				.listPage li a {
					display: block;
					padding: 8px 15px;
					border-radius: 5px;
					color: #333;
					text-decoration: none;
					transition: all 0.3s ease;
				}

				.listPage li.active a {
					background-color: #7fad39 !important;
					color: white;
				}

				.listPage li a:hover {
					background-color: #ddd;
				}

				.listPage li.active a:hover {
					background-color: #6a9230 !important;
				}

			.listPage .active {
				background-color: white !important;
				color: #fff;
			}
	</style>
}

<div class="row mb-4">
	@await Html.PartialAsync("_DashboardCard", new DashboardCardModel {
	Title = "New Blogs Today",
		Value = Model.NewBlogsToday.ToString(),
		BgColor = "linear-gradient(to right, #ff416c, #ff4b2b)" // Pink-red gradient
		})
	@await Html.PartialAsync("_DashboardCard", new DashboardCardModel {
		Title = "Total Blogs",
		Value = Model.TotalBlogs.ToString(),
		BgColor = "linear-gradient(to right, #56ccf2, #2f80ed)" // Blue gradient
		})
	@await Html.PartialAsync("_DashboardCard", new DashboardCardModel {
		Title = "Active Users Today",
		Value = Model.ActiveUsersToday.ToString(),
		BgColor = "linear-gradient(to right, #00b09b, #96c93d)" // Green gradient
		})
	@await Html.PartialAsync("_DashboardCard", new DashboardCardModel {
		Title = "Total Users",
		Value = Model.TotalUsers.ToString(),
		BgColor = "linear-gradient(to right, #7f00ff, #e100ff)" // Purple gradient
		})
</div>

<div class="d-flex">
	<!-- Main content -->
	<div style="flex-grow: 1;">
		<h3>Newest Blogs</h3>
		<table class="table table-bordered mt-3">
			<thead class="custom-header">
				<tr>
					<th>Title</th>
					<th>Created at</th>
					<th>Blog rate</th>
					<th>Blog likes</th>
					<th>Blog status</th>
					<th>Eatery address</th>
					<th>Actions</th>
				</tr>
			</thead>
			<tbody id="latestBlogTableBody">
				<!-- Blogs will be loaded here -->
			</tbody>
		</table>

		<ul class="pagination listPage mt-3"></ul>
	</div>
</div>

@section Scripts {
	<!-- Add JWT decode library -->
	<script src="https://cdn.jsdelivr.net/npm/jwt-decode@3.1.2/build/jwt-decode.min.js"></script>

	<script>
		$(document).ready(function () {
			checkAdminAccess();
			let currentPage = 1;
			const pageSize = 10;

			function loadDashboardBlogs(page) {
				const apiUrl = `http://localhost:5029/api/Admin/dashboard?page=${page}&pageSize=${pageSize}`;
				$('#preloder').show();

				$.ajax({
					url: apiUrl,
					type: 'GET',
					dataType: 'json',
					success: function (response) {
						$('#preloder').hide();
						const blogs = response.blogs || response.Blogs || [];
						const totalCount = response.totalCount || response.TotalCount || 0;
						const tbody = $('#latestBlogTableBody');
						tbody.empty();

						if (blogs.length > 0) {
							blogs.forEach(blog => {
								const row = `
									<tr>
										<td class="truncate-title"><a href="/Blog/Details?id=${blog.blogId}">${blog.blogTitle}</a></td>
										<td>${blog.blogDate}</td>
										<td>${blog.blogRate ?? 0}</td>
										<td>${blog.blogLike ?? 0}</td>
										<td>
											<span class="badge ${blog.blogStatus === 1 ? 'bg-success' : 'bg-secondary'}">
												${blog.blogStatus === 1 ? 'Active' : 'Inactive'}
											</span>
										</td>
										<td>${blog.eateryAddressDetail ?? ''}</td>
										<td>
											<button class="btn btn-sm ${blog.blogStatus === 1 ? 'btn-danger' : 'btn-success'} toggle-status-btn"
													data-id="${blog.blogId}">
												${blog.blogStatus === 1 ? 'Deactivate' : 'Activate'}
											</button>
										</td>
									</tr>
								`;
								tbody.append(row);
							});

							updatePagination(page, pageSize, totalCount);
						} else {
							tbody.html('<tr><td colspan="6" class="text-center">No blogs found.</td></tr>');
						}
					},
					error: function () {
						$('#preloder').hide();
						$('#latestBlogTableBody').html('<tr><td colspan="6" class="text-danger">Error loading blogs.</td></tr>');
					}
				});
			}

		function getUserIdFromToken() {
			const token = localStorage.getItem('accessToken');
			if (!token) return null;

			try {
				const decoded = jwt_decode(token); // Sử dụng jwt-decode để giải mã token
				return decoded['http://schemas.xmlsoap.org/ws/2005/05/identity/claims/nameidentifier']; // Lấy userId từ claim
			} catch (e) {
				console.error('Invalid token', e);
				return null;
			}
		}

		 function checkAdminAccess() {
			const userId = getUserIdFromToken();

			// If no token or userId, redirect to login
			if (!userId) {
				console.log('No token found, redirecting to login');
				window.location.href = '/Authen';
				return;
			}

			// Call API to get user data including role
			$.ajax({
				url: `http://localhost:5029/api/Account?id=${userId}`,
				type: 'GET',
				headers: {
					'Authorization': 'Bearer ' + localStorage.getItem('accessToken')
				},
				success: function(user) {
					console.log('User data received:', user);

					// Check if user role is Admin (1)
					if (user.roleId !== 1) {
						console.log('User is not admin, redirecting to homepage');
						localStorage.setItem('homeAlert', 'Access denied.');

						window.location.href = '/Home';
						// alert('Access denied.');
						return;
					}

					console.log('Admin access granted');
					// User is admin, continue with dashboard loading
				},
                error: function(xhr, status, error) {
                console.error('Error fetching user data:', error);
                }
			});
		}

			function updatePagination(currentPage, pageSize, totalItems) {
				const totalPages = Math.ceil(totalItems / pageSize);
				const pagination = $('.listPage');
				pagination.empty();

				if (totalPages <= 1) return;

				// Previous button
				if (currentPage > 1) {
					pagination.append(`
						<li class="page-item">
							<a class="page-link" href="#" data-page="${currentPage - 1}">«</a>
						</li>`);
				}

				// Page numbers
				for (let i = 1; i <= totalPages; i++) {
					pagination.append(`
						<li class="page-item ${i === currentPage ? 'active' : ''}">
							<a class="page-link" href="#" data-page="${i}">${i}</a>
						</li>`);
				}

				// Next button
				if (currentPage < totalPages) {
					pagination.append(`
						<li class="page-item">
							<a class="page-link" href="#" data-page="${currentPage + 1}">»</a>
						</li>`);
				}
			}

			$(document).on('click', '.toggle-status-btn', function () {
				const blogId = $(this).data('id');

				// Call API to toggle status, then refresh the table
				$.post(`http://localhost:5029/api/Admin/toggle-blog-status/${blogId}`, function () {
					toastr.success("Status updated!");
					loadDashboardBlogs(currentPage);
				}).fail(() => {
					toastr.error("Failed to toggle status.");
				});
			});

			// Handle pagination clicks
			$(document).on('click', '.listPage .page-link', function (e) {
				e.preventDefault();
				const newPage = parseInt($(this).data('page'));
				if (!isNaN(newPage) && newPage !== currentPage) {
					currentPage = newPage;
					loadDashboardBlogs(currentPage);
				}
			});

			// Initial load
			loadDashboardBlogs(currentPage);
		});

	</script>
}