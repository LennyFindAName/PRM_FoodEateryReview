@using BusinessObjects.ModerationModels.Blog
@{
    Layout = "_Layout";
    ViewData["Title"] = "Create Blog";
    var paidOptions = ViewBag.PaidBlogOptions as List<object>;
}

@section Styles {
	<!-- Toastr CSS (add this to your Styles section) -->
	<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css" type="text/css">

	<!-- Google Font -->
	<link href="https://fonts.googleapis.com/css2?family=Cairo:wght@200;300;400;600;900&display=swap" rel="stylesheet">

	<!-- Css Styles -->
	<link rel="stylesheet" href="@Url.Content("~/css/bootstrap.min.css")" type="text/css">
	<link rel="stylesheet" href="@Url.Content("~/css/font-awesome.min.css")" type="text/css">
	<link rel="stylesheet" href="@Url.Content("~/css/elegant-icons.css")" type="text/css">
	<link rel="stylesheet" href="@Url.Content("~/css/nice-select.css")" type="text/css">
	<link rel="stylesheet" href="@Url.Content("~/css/jquery-ui.min.css")" type="text/css">
	<link rel="stylesheet" href="@Url.Content("~/css/owl.carousel.min.css")" type="text/css">
	<link rel="stylesheet" href="@Url.Content("~/css/slicknav.min.css")" type="text/css">
	<link rel="stylesheet" href="@Url.Content("~/css/style.css")" type="text/css">
	<link rel="stylesheet" href="@Url.Content("~/css/select-location-modal.css")" type="text/css">
	<link rel="canonical" href="https://getbootstrap.com/docs/5.3/examples/badges/">


	<!-- Tag Styling -->
	<style>
		.tag-container {
			border-radius: 4px;
			display: flex;
			width: 750px; /* Set your desired width */
			flex-wrap: wrap; /* Allow elements to wrap to new lines */
			border: 1px solid lightgrey;
		}

			.tag-container input {
				flex: 1;
				outline: none;
				border: 0;
			}

			.tag-container .tag {
				padding: 5px;
				border: 1px solid lightgrey;
				margin: 4px;
				display: flex;
				align-items: center;
				border-radius: 10px;
				background: lightgrey;
			}

		.remove-tag {
			font-size: 10px;
			margin-left: 7px;
		}

		.remove-tag {
			cursor: pointer;
			margin-left: 5px;
		}

	</style>

	<!-- Quill Editor CSS -->
	<link href="https://cdn.jsdelivr.net/npm/quill@2.0.3/dist/quill.snow.css" rel="stylesheet">
	<!-- Editor container styling -->
	<style>
		#editor-container {
			height: 300px;
			margin-bottom: 15px;
		}

		.ql-container {
			font-size: 16px;
		}

		.ql-editor {
			min-height: 250px;
		}
	</style>


	<!-- Toastr -->
	<style>
		/* Force Toastr colors */
		.toast-success {
			background-color: #51A351 !important;
		}

		.toast-error {
			background-color: #BD362F !important;
		}

		.toast-info {
			background-color: #2F96B4 !important;
		}

		.toast-warning {
			background-color: #F89406 !important;
		}

		/* Make sure text is visible */
		#toast-container > div {
			color: white !important;
			opacity: 1 !important;
		}
	</style>


	<!-- Location-selection Styling -->
	<style>
		.ck-content {
			height: 300px;
		}

		.address_input {
			display: flex; /* Make the container a flexbox */
			flex-direction: column; /* Arrange elements vertically */
			align-items: center; /* Center elements horizontally */
			gap: 20px; /* Add spacing between elements */
		}

	</style>

	<!-- Misc -->
	<style>

		button {
			background-color: white;
			border: 1px solid black;
			border-radius: 5px;
		}

		td {
			padding: 0 10px; /* Add padding to each cell for spacing (adjust as needed) */
			width: 300px;
		}

		.category-select {
			width: 100%;
			display: inline-table;
			padding: 5px;
			margin: 5px 2%;
			border: solid 1px #686868;
			border-radius: 5px;
		}

		.category-content {
			margin-bottom: 100px;
		}

		.background_image {
			background-image: linear-gradient(to right, transparent, #FFFFFF), url('img/location-default-image.jpeg');
			width: 300px;
			height: 150px;
			background-size: cover;
		}


		#search-tag-content {
			width: 500px; /* Adjust width as needed */
			height: 200px; /* Adjust height as needed */
			overflow-y: auto; /* Enable vertical scrollbar */
			border: 1px solid #ccc; /* Optional border for the box */
		}

		.preview-container {
			width: 100%;
			max-height: 300px;
			overflow-y: auto;
			border: 1px solid #ddd;
			border-radius: 4px;
			padding: 10px;
			margin-top: 10px;
			display: none; /* Hidden by default */
			background-color: #f9f9f9;
		}

		.preview-gallery {
			display: flex;
			flex-wrap: wrap;
			gap: 10px;
		}

		.preview-image-multiple {
			width: 120px;
			height: 120px;
			object-fit: cover;
			border-radius: 4px;
			border: 1px solid #eee;
			transition: transform 0.2s;
		}

			.preview-image-multiple:hover {
				transform: scale(1.05);
				box-shadow: 0 0 5px rgba(0,0,0,0.2);
			}

		.single-image {
			justify-content: center;
		}

		.preview-image-single {
			max-width: 90%;
			max-height: 250px;
			object-fit: contain;
			border-radius: 4px;
			border: 1px solid #eee;
		}


		.rate-input {
			width: 60px;
			padding: 5px;
			margin-right: 50px
		}

		.text-wrapper {
			margin-right: 20px; /* Adjust spacing as needed */
		}

	</style>



}
@section Scripts {
	<!-- Quill Text Editor -->
	<script src="https://cdn.jsdelivr.net/npm/quill@2.0.3/dist/quill.min.js"></script>
	<script>
		let quill; // Make quill globally accessible

		document.addEventListener('DOMContentLoaded', function() {
			// Initialize Quill editor
			quill = new Quill('#editor-container', {
				theme: 'snow',
				placeholder: 'Viết nội dung của bạn ở đây...',
				modules: {
					toolbar: [
						['bold', 'italic', 'underline', 'strike'],
						[{ 'header': 1 }, { 'header': 2 }],
						[{ 'list': 'ordered' }, { 'list': 'bullet' }],
						[{ 'indent': '-1' }, { 'indent': '+1' }],
						['link', 'image'],
						['clean']
					]
				}
			});

			// Form handling occurs via submitBlogForm() function

			const form = document.querySelector('form');
			form.addEventListener('submit', function(event) {
				// This only runs if the form is submitted normally, not via our custom submitBtn handler
				const descriptionField = document.getElementById('description');
				descriptionField.value = quill.root.innerHTML;

				// Basic validation for length
				const plainText = quill.getText().trim();
				if (plainText.length < 50) {
					alert('Nội dung phải chứa ít nhất 50 ký tự.');
					event.preventDefault();
					return false;
				}
			});

			// Remove the redundant description field if it exists
			const redundantDescription = document.getElementById('Description');
			if (redundantDescription) {
				const parentElement = redundantDescription.closest('.form-group');
				if (parentElement) {
					parentElement.remove();
				}
			}
		});
	</script>

	<!-- Image and Price Range Validation -->
	<script>
		// Image validation functions
		function validateImages() {
			const imageInput = document.getElementById('imageLink');
			const files = imageInput.files;

			// Check if images are selected
			if (!files || files.length === 0) {
				showValidationError('Vui lòng chọn ít nhất 1 ảnh cho bài viết.');
				return false;
			}

			// Check image count (1-5 images)
			if (files.length > 5) {
				showValidationError('Chỉ được chọn tối đa 5 ảnh cho bài viết.');
				return false;
			}

			// Check file formats
			const allowedTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/gif', 'image/webp'];
			for (let i = 0; i < files.length; i++) {
				if (!allowedTypes.includes(files[i].type)) {
					showValidationError(`Ảnh "${files[i].name}" không đúng định dạng. Chỉ chấp nhận: JPG, JPEG, PNG, GIF, WEBP.`);
					return false;
				}

				// Check file size (max 5MB per image)
				if (files[i].size > 5 * 1024 * 1024) {
					showValidationError(`Ảnh "${files[i].name}" quá lớn. Kích thước tối đa là 5MB.`);
					return false;
				}
			}

			return true;
		}

		function validateBillImage() {
			const billInput = document.getElementById('billLink');
			const file = billInput.files[0];

			// Check if bill image is selected
			if (!file) {
				showValidationError('Vui lòng chọn ảnh hóa đơn.');
				return false;
			}

			// Check file format
			const allowedTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/gif', 'image/webp'];
			if (!allowedTypes.includes(file.type)) {
				showValidationError(`Ảnh hóa đơn "${file.name}" không đúng định dạng. Chỉ chấp nhận: JPG, JPEG, PNG, GIF, WEBP.`);
				return false;
			}

			// Check file size (max 5MB)
			if (file.size > 5 * 1024 * 1024) {
				showValidationError(`Ảnh hóa đơn "${file.name}" quá lớn. Kích thước tối đa là 5MB.`);
				return false;
			}

			return true;
		}

		function validatePriceRange() {
			const priceRange = document.querySelector('select[name="price-range"]').value;

			if (!priceRange || priceRange.trim() === '') {
				showValidationError('Vui lòng chọn khoảng giá.');
				return false;
			}

			return true;
		}

		// Make validation functions globally accessible
		window.validateImages = validateImages;
		window.validateBillImage = validateBillImage;
		window.validatePriceRange = validatePriceRange;
	</script>


	<!--Form Submit-->
	<script>
		const token = localStorage.getItem("accessToken");
				if (!token) {
			alert("Bạn cần đăng nhập để truy cập trang này.");
			window.location.href = "/authen"; // hoặc route login thật của bạn
		}

		document.addEventListener('DOMContentLoaded', function() {
			document.getElementById('submitBtn').addEventListener('click', function(e) {
				e.preventDefault();

				// Disable the button immediately to prevent multiple clicks
				const submitBtn = document.getElementById('submitBtn');
				submitBtn.disabled = true;
				submitBtn.textContent = 'Đang xử lý...'; // Optional: change button text

				submitBlogForm();
			});
		});

		function submitBlogForm() {
			const submitBtn = document.getElementById('submitBtn');
			// First, get the form data
			const blogTitle = document.querySelector('input[name="BlogTitle"]').value;

			// Update this line to get content directly from Quill
			const blogContent = quill.root.innerHTML;

			// Validate content length
			const plainText = quill.getText().trim();
			if (plainText.length < 50) {
				alert('Nội dung phải chứa ít nhất 50 ký tự.');
				// Re-enable button if validation fails
				submitBtn.disabled = false;
				submitBtn.textContent = 'Tạo bài';
				return; // Stop submission if validation fails
			}
			// Validate meal type checkboxes
			if (!window.validateMealType()) {
				showValidationError('Vui lòng chọn ít nhất một loại bữa ăn.');
				submitBtn.disabled = false;
				submitBtn.textContent = 'Tạo bài';
				return;
			}

			// Validate food type checkboxes
			if (!window.validateFoodType()) {
				showValidationError('Vui lòng chọn ít nhất một loại ẩm thực.');
				submitBtn.disabled = false;
				submitBtn.textContent = 'Tạo bài';
				return;
			}

			// Validate price range
			if (!window.validatePriceRange()) {
				submitBtn.disabled = false;
				submitBtn.textContent = 'Tạo bài';
				return;
			}

			// Validate images
			if (!window.validateImages()) {
				submitBtn.disabled = false;
				submitBtn.textContent = 'Tạo bài';
				return;
			}

			// Validate bill image
			if (!window.validateBillImage()) {
				submitBtn.disabled = false;
				submitBtn.textContent = 'Tạo bài';
				return;
			}
			const eateryAddressDetail = document.getElementById('addressInput').value;

			// Get location from dropdowns
			const city = document.getElementById('city');
			const district = document.getElementById('district');
			const ward = document.getElementById('ward');
			const eateryLocationDetail =
				(ward ? ward.options[ward.selectedIndex].text : '') + ', ' +
				(district ? district.options[district.selectedIndex].text : '') + ', ' +
				(city ? city.options[city.selectedIndex].text : '');

			// Get ratings
			const foodQualityRate = parseInt(document.getElementById('foodQuality').value);
			const environmentRate = parseInt(document.getElementById('environment').value);
			const pricingRate = parseInt(document.getElementById('pricing').value);
			const serviceRate = parseInt(document.getElementById('service').value);
			const hygieneRate = parseInt(document.getElementById('hygiene').value);
			const blogRate = parseFloat(document.getElementById('overall').value);

			// Get food types
			const foodTypeNames = [];
			document.querySelectorAll('input[name="food-type"]:checked').forEach(function(checkbox) {
				foodTypeNames.push(checkbox.value);
			});

			// Get meal types
			const mealTypeNames = [];
			document.querySelectorAll('input[name="meal-type"]:checked').forEach(function(checkbox) {
				mealTypeNames.push(checkbox.value);
			});

			// Get price range
			const priceRange = document.querySelector('select[name="price-range"]').value;

					//Get Paid Options
		const paidOptions = document.querySelector('input[name="displayCost"]:checked').value;


			// Function to read a file as base64
			function readFileAsBase64(file) {
				return new Promise((resolve, reject) => {
					const reader = new FileReader();
					reader.onload = () => {
						// Extract base64 data without the prefix
						const base64String = reader.result.split(',')[1];
						resolve(base64String);
					};
					reader.onerror = reject;
					reader.readAsDataURL(file);
				});
			}

			const userId = getUserIdFromToken();

			// Giải mã token và lấy userId
			function getUserIdFromToken() {
				const token = localStorage.getItem('accessToken');
				if (!token) return null;

				try {
					const decoded = jwt_decode(token);
					return decoded['http://schemas.xmlsoap.org/ws/2005/05/identity/claims/nameidentifier'];
				} catch (e) {
					console.error('Invalid token', e);
					return null;
				}
			}

					//Get Paid Options and Option ID
					const selectedPaidOption = document.querySelector('input[name="displayCost"]:checked');
					const paidOptionValue = selectedPaidOption.value;
					const paidOptionId = selectedPaidOption.getAttribute('data-option-id');




			// Convert images to base64 and prepare the blog data
			Promise.all([
				// Convert bill image
				document.getElementById('billLink').files[0] ?
					readFileAsBase64(document.getElementById('billLink').files[0]) : Promise.resolve(null),

				// Convert multiple blog images
				Promise.all(
					Array.from(document.getElementById('imageLink').files)
						.map(file => readFileAsBase64(file))
				)
			]).then(([billImageBase64, blogImagesBase64]) => {
				// Create the blog data object
				const blogData = {
					UserId: userId, // Replace with actual user ID from authentication
					BlogTitle: blogTitle,
					BlogContent: blogContent,
					BlogDate: new Date().toISOString().split('T')[0], // Format as YYYY-MM-DD
					BlogBillImageBase64: billImageBase64,
					BlogRate: blogRate,
					BlogLike: 0,
					BlogStatus: 0,
					EateryLocationDetail: eateryLocationDetail,
					EateryAddressDetail: eateryAddressDetail,
					FoodQualityRate: foodQualityRate,
					EnvironmentRate: environmentRate,
					ServiceRate: serviceRate,
					PricingRate: pricingRate,
					HygieneRate: hygieneRate,
					FoodTypeNames: foodTypeNames,
					MealTypeNames: mealTypeNames,
					BlogImagesBase64: blogImagesBase64,
					PriceRanges: priceRange ? [priceRange] : [],
					DisplayPaidCost: paidOptionValue,
					PaidOptionId: paidOptionId
				};

				// Log the prepared data (exclude images for brevity)
				console.log("Sending blog data:", {
					...blogData,
					BlogBillImageBase64: blogData.BlogBillImageBase64 ? "Base64 data (omitted for brevity)" : null,
					BlogImagesBase64: blogData.BlogImagesBase64 ? `${blogData.BlogImagesBase64.length} images (omitted for brevity)` : []
				});

				// Submit to API
				fetch('http://localhost:5029/api/Blog/create', {
					method: 'POST',
					headers: {
						'Content-Type': 'application/json'
					},
					body: JSON.stringify(blogData)
				})
				.then(response => {
					if (!response.ok) {
						return response.json().then(errorData => {
							const errorMessage = errorData.error || 'Có lỗi xảy ra';
							throw new Error(errorMessage);
						}).catch(() => {
							// Fallback if response is not JSON
							return response.text().then(text => {
								throw new Error(text);
							});
						});
					}
					return response.json();
				})
				.then(data => {
					toastr.success('Bài viết đã được tạo thành công!', 'Thành công');

					// Keep button disabled after success - user should navigate away
					setTimeout(() => {
						window.location.href = '/';
					}, 2000);
				})
				.catch(error => {
					console.error('Error:', error);
					toastr.error(error.message || 'Có lỗi xảy ra khi tạo bài viết', 'Lỗi');

					// Re-enable button if there's an error
					submitBtn.disabled = false;
					submitBtn.textContent = 'Tạo bài';
				});
			}).catch(error => {
				console.error('Error processing files:', error);
				toastr.error('Có lỗi xảy ra khi xử lý file hình ảnh', 'Lỗi');

				// Re-enable button if there's an error
				submitBtn.disabled = false;
				submitBtn.textContent = 'Tạo bài';
			});
		}
	</script>


	<!-- Rate Calculation -->
	<script>
					// Rating calculation code
		document.addEventListener('DOMContentLoaded', function() {
			const foodQualityInput = document.getElementById('foodQuality');
			const environmentInput = document.getElementById('environment');
			const pricingInput = document.getElementById('pricing');
			const serviceInput = document.getElementById('service');
			const hygieneInput = document.getElementById('hygiene');
			const overallInput = document.getElementById('overall');

			// Initialize with default values
			foodQualityInput.value = foodQualityInput.value || "0";
			environmentInput.value = environmentInput.value || "0";
			pricingInput.value = pricingInput.value || "0";
			serviceInput.value = serviceInput.value || "0";
			hygieneInput.value = hygieneInput.value || "0";

			function capRatingValue(value) {
				// Parse the input value, default to 0 if invalid
				let numValue = parseFloat(value) || 0;

				// Cap the value between 0 and 5
				if (numValue < 0) numValue = 0;
				if (numValue > 5) numValue = 5;

				return numValue;
			}

			function calculateOverall() {
				// Get input values and cap them at 5
				const foodQuality = capRatingValue(foodQualityInput.value);
				const environment = capRatingValue(environmentInput.value);
				const pricing = capRatingValue(pricingInput.value);
				const service = capRatingValue(serviceInput.value);
				const hygiene = capRatingValue(hygieneInput.value);

				// Update input values with capped values
				foodQualityInput.value = foodQuality;
				environmentInput.value = environment;
				pricingInput.value = pricing;
				serviceInput.value = service;
				hygieneInput.value = hygiene;

				// Calculate average
				const totalRating = foodQuality + environment + pricing + service + hygiene;
				const averageRating = totalRating / 5;
				overallInput.value = averageRating.toFixed(1); // Format as float with one decimal place

				// Add visual feedback
				if (averageRating >= 4) {
					overallInput.style.color = "#28a745"; // Green for high ratings
				} else if (averageRating >= 2.5) {
					overallInput.style.color = "#fd7e14"; // Orange for medium ratings
				} else {
					overallInput.style.color = "#dc3545"; // Red for low ratings
				}
			}

			// Call the function initially
			calculateOverall();

			// Add event listeners for immediate updates
			const ratingInputs = [foodQualityInput, environmentInput, pricingInput, serviceInput, hygieneInput];

			ratingInputs.forEach(input => {
				// Update on any input change
				input.addEventListener('input', function() {
					// Immediately cap the value and update the calculation
					this.value = capRatingValue(this.value);
					calculateOverall();
				});

				// Also handle on blur for good measure
				input.addEventListener('blur', function() {
					// Immediately cap the value and update the calculation
					this.value = capRatingValue(this.value);
					calculateOverall();
				});
			});
		});
	</script>



	<!-- Image Preview -->
	<script>
			// Global object to store file references
		const imageFiles = {
			multiple: [],
			single: null
		};

		/**
		 * Handles multiple image uploads
		 * param {HTMLInputElement} input - The file input element
		 */
		function handleMultipleImages(input) {
			const files = input.files;
			const previewContainer = document.getElementById('image-preview-container-multiple');
			const previewGallery = document.getElementById('image-preview-multiple');

			// Clear previous previews
			previewGallery.innerHTML = '';

			if (files && files.length > 0) {
				// Validate image count
				if (files.length > 5) {
					showValidationError('Chỉ được chọn tối đa 5 ảnh cho bài viết.');
					input.value = ''; // Clear the input
					previewContainer.style.display = 'none';
					return;
				}

				// Validate each file
				const allowedTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/gif', 'image/webp'];
				let hasInvalidFile = false;

				for (let i = 0; i < files.length; i++) {
					if (!allowedTypes.includes(files[i].type)) {
						showValidationError(`Ảnh "${files[i].name}" không đúng định dạng. Chỉ chấp nhận: JPG, JPEG, PNG, GIF, WEBP.`);
						hasInvalidFile = true;
						break;
					}

					if (files[i].size > 5 * 1024 * 1024) {
						showValidationError(`Ảnh "${files[i].name}" quá lớn. Kích thước tối đa là 5MB.`);
						hasInvalidFile = true;
						break;
					}
				}

				if (hasInvalidFile) {
					input.value = ''; // Clear the input
					previewContainer.style.display = 'none';
					return;
				}
				// Store file references
				imageFiles.multiple = Array.from(files);

				// Show the container
				previewContainer.style.display = 'block';

				// Process each file
				Array.from(files).forEach(file => {
					if (!file.type.match('image.*')) {
						return; // Skip non-image files
					}

					const reader = new FileReader();

					reader.onload = function(e) {
						const img = document.createElement('img');
						img.src = e.target.result;
						img.classList.add('preview-image-multiple');
						img.title = file.name;

						previewGallery.appendChild(img);
					};

					reader.readAsDataURL(file);
				});
			} else {
				// Hide the container if no files
				previewContainer.style.display = 'none';
				imageFiles.multiple = [];
			}
		}

		/**
		 * Handles single image upload (for bill)
		 * param {HTMLInputElement} input - The file input element
		 */
		function handleSingleImage(input) {
			const file = input.files[0];
			const previewContainer = document.getElementById('image-preview-container-bill');
			const previewGallery = document.getElementById('image-preview-single');

			// Clear previous preview
			previewGallery.innerHTML = '';

			if (file) {
				// Validate file format
				const allowedTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/gif', 'image/webp'];
				if (!allowedTypes.includes(file.type)) {
					showValidationError(`Ảnh hóa đơn "${file.name}" không đúng định dạng. Chỉ chấp nhận: JPG, JPEG, PNG, GIF, WEBP.`);
					input.value = ''; // Clear the input
					previewContainer.style.display = 'none';
					return;
				}

				// Validate file size
				if (file.size > 5 * 1024 * 1024) {
					showValidationError(`Ảnh hóa đơn "${file.name}" quá lớn. Kích thước tối đa là 5MB.`);
					input.value = ''; // Clear the input
					previewContainer.style.display = 'none';
					return;
				}

				// Store file reference
				imageFiles.single = file;


				// Show the container
				previewContainer.style.display = 'block';

				const reader = new FileReader();

				reader.onload = function(e) {
					const img = document.createElement('img');
					img.src = e.target.result;
					img.classList.add('preview-image-single');
					img.title = file.name;

					previewGallery.appendChild(img);
				};

				reader.readAsDataURL(file);
			} else {
				// Hide the container if no file
				previewContainer.style.display = 'none';
				imageFiles.single = null;
			}
		}

	</script>

	<!-- Tag Styling -->
	<script>
		const tagInput = document.querySelector('#input');
		const tagContainer = document.querySelector('.tag-container');
		const tagArray = document.querySelector('#tags-array');
		//Handle the display
		const searchInput = document.querySelector('#input'); // Select the search input
		const searchTagContent = document.getElementById('search-tag-content'); // Select the content div
		const tags = [];

		function resetInput() {
			tagInput.value = '';
			tagInput.focus();
		}

		const createTag = (tagValue) => {
			const value = tagValue.trim();

			if (value === '' || tags.includes(value)) {
				resetInput();
				return;
			}

			// Additional validation for #, length, and uniqueness
			if (!value.startsWith('#') || value.length < 2 || value.length > 17 || tags.includes(value)) {
				resetInput();
				return;
			}

			// Validate for single # at the beginning
			const hashCount = (value.match(/#/g) || []).length;
			if (hashCount !== 1) {
				resetInput();
				return; // Do not create tag if # count is not 1
			}


			const tag = document.createElement('span');
			const tagContent = document.createTextNode(value);
			tag.setAttribute('class', 'tag');
			tag.appendChild(tagContent);

			const close = document.createElement('span');
			close.setAttribute('class', 'remove-tag');
			close.innerHTML = '&#10006;'; //Create cross
			close.onclick = handleRemoveTag;

			tag.appendChild(close);
			tagContainer.insertBefore(tag, tagContainer.firstChild);
			tags.push(value);
			tagArray.value = tags.join(',');

			resetInput();
		};

		const handleRemoveTag = (e) => {
			const item = e.target.textContent;
			e.target.parentElement.remove();
			tags.splice(tags.indexOf(item), 1);
			//At (the position of the wanted-deleted item , delete 1 item (that item))
			tagArray.value = tags.join(',');
		};

		tagInput.addEventListener('keyup', (e) => {
			const {key} = e;
			if (key === ' ' || key === ',' || key === '.') {
				createTag(tagInput.value.substring(0, tagInput.value.length - 1));
				hideSearchResults();
			}
		});



		function showSearchResults() {
			searchTagContent.style.display = 'block'; // Show the content div
		}

		function hideSearchResults() {
			searchTagContent.style.display = 'none'; // Hide the content div
		}

		document.addEventListener('click', function (event) {
			const isClickInsideInput = searchInput.contains(event.target); // Check if click is inside the search input
			const isClickInsideContent = searchTagContent.contains(event.target); // Check if click is inside the search input
			if (!isClickInsideInput && !isClickInsideContent && searchTagContent.style.display === 'block') { // Hide on click outside only if visible
				hideSearchResults();
			}
		});

		//Handle the search AJAX
		function searchTag(param) {
			var txtSearch = param.value;
			$.ajax({
				url: "search-tag",
				type: "get",
				data: {
					txt: txtSearch
				},
				success: function (data) {
					var row = document.getElementById("search-tag-content");
					row.innerHTML = data;
				},
				error: function (xhr) {

				}
			});
		}
		function getTagInfo(buttonElement) {
			const tagInfo = buttonElement.dataset.tagInfo;
			createTag(tagInfo.substring(0, tagInfo.length));
		}
	</script>
	<!-- Location-selection Styling -->
	<script>
		const addressInput = document.getElementById('addressInput');
		const selectCity = document.getElementById('city');
		const selectDistrict = document.getElementById('district');
		const selectWard = document.getElementById('ward');
		const showMapButton = document.getElementById('showMapButton');

		// Get the API key from server-side (passed via ViewBag)
		const googleMapsApiKey = 'AIzaSyCJnsbQBxAy1goHWDsu5bzOqO4epRMtJqw';

		showMapButton.addEventListener('click', () => {
			const textCity = selectCity.options[selectCity.selectedIndex].text;
			const textDistrict = selectDistrict.options[selectDistrict.selectedIndex].text;
			const textWard = selectWard.options[selectWard.selectedIndex].text;

			const address = addressInput.value + ',' + textWard + ',' + textDistrict + ',' + textCity;

			// Encode the full address for URL
			const encodedAddress = encodeURIComponent(address);

			const mapContainer = document.getElementById('mapContainer');

			// Construct the URL with the encoded address and API key from server

			const mapSrc = `https://www.google.com/maps/embed/v1/place?key=${googleMapsApiKey}&q=${encodedAddress}`;

			// Debugging: Log the map source URLs (excluding the API key for security)
			console.log('Map Source URL (API key hidden):', 'https://www.google.com/maps/embed/v1/place?key=*****&q=' + encodedAddress);

			// Update the iframe src and show the map container
			mapContainer.innerHTML = `<iframe src="${mapSrc}" width="750" height="400" allowfullscreen></iframe>`;
			mapContainer.style.display = 'block'; // Show the map container
		});
	</script>


	<!-- Toastr Notifications -->
	<script>
		// Make sure jQuery is loaded before this script runs
		$(document).ready(function() {
			// Force refresh any existing toastr instances
			if (typeof toastr !== 'undefined') {
				toastr.remove();

				// Configure toastr options
				toastr.options = {
					"closeButton": true,
					"debug": false,
					"newestOnTop": true,
					"progressBar": true,
					"positionClass": "toast-top-right",
					"preventDuplicates": false,
					"onclick": null,
					"showDuration": "300",
					"hideDuration": "1000",
					"timeOut": "5000",
					"extendedTimeOut": "1000",
					"showEasing": "swing",
					"hideEasing": "linear",
					"showMethod": "fadeIn",
					"hideMethod": "fadeOut"
				};

				// Test all notification types to see which ones display correctly
				//setTimeout(() => { toastr.success("Thao tác thành công!", "Thành công"); }, 300);
				//setTimeout(() => { toastr.info("Đây là thông tin bổ sung.", "Thông tin"); }, 600);
				//setTimeout(() => { toastr.warning("Hãy điền đầy đủ thông tin.", "Lưu ý"); }, 900);
				//setTimeout(() => { toastr.error("Có lỗi xảy ra.", "Lỗi"); }, 1200);
			} else {
				console.error("Toastr library not loaded properly");
			}
		});
	</script>

	<!-- Enhanced Checkbox Validation -->
	<script>
		// Validation functions for checkbox groups
		function validateCheckboxGroup(groupName, errorMessage) {
			const checkboxes = document.querySelectorAll(`input[name="${groupName}"]:checked`);
			return checkboxes.length > 0;
		}
		function showValidationError(message) {
			toastr.error(message, 'Lỗi xác thực');
		}

		// Enhanced meal type validation
		(function () {
			const form = document.querySelector('#sectionFormMealType');
			const checkboxes = form.querySelectorAll('input[type=checkbox]');
			const checkboxLength = checkboxes.length;
			const firstCheckbox = checkboxLength > 0 ? checkboxes[0] : null;

			function init() {
				if (firstCheckbox) {
					for (let i = 0; i < checkboxLength; i++) {
						checkboxes[i].addEventListener('change', checkValidity);
					}
					checkValidity();
				}
			}

			function isChecked() {
				for (let i = 0; i < checkboxLength; i++) {
					if (checkboxes[i].checked)
						return true;
				}
				return false;
			}

			function checkValidity() {
				const errorMessage = !isChecked() ? 'Vui lòng chọn ít nhất một loại bữa ăn.' : '';
				firstCheckbox.setCustomValidity(errorMessage);
			}

			// Make validation function globally accessible
			window.validateMealType = function() {
				return isChecked();
			};

			init();
		})();

		// Enhanced food type validation
		(function () {
			const form = document.querySelector('#sectionFormFoodType');
			const checkboxes = form.querySelectorAll('input[type=checkbox]');
			const checkboxLength = checkboxes.length;
			const firstCheckbox = checkboxLength > 0 ? checkboxes[0] : null;

			function init() {
				if (firstCheckbox) {
					for (let i = 0; i < checkboxLength; i++) {
						checkboxes[i].addEventListener('change', checkValidity);
					}
					checkValidity();
				}
			}

			function isChecked() {
				for (let i = 0; i < checkboxLength; i++) {
					if (checkboxes[i].checked)
						return true;
				}
				return false;
			}

			function checkValidity() {
				const errorMessage = !isChecked() ? 'Vui lòng chọn ít nhất một loại ẩm thực.' : '';
				firstCheckbox.setCustomValidity(errorMessage);
			}

			// Make validation function globally accessible
			window.validateFoodType = function() {
				return isChecked();
			};

			init();
		})();
	</script>

	<!-- Js Plugins -->
	<script src="@Url.Content("~/js/jquery-3.3.1.min.js")"></script>
	<script src="@Url.Content("~/js/bootstrap.min.js")"></script>
	<script src="@Url.Content("~/js/jquery-ui.min.js")"></script>
	<script src="@Url.Content("~/js/jquery.slicknav.js")"></script>
	<script src="@Url.Content("~/js/mixitup.min.js")"></script>
	<script src="@Url.Content("~/js/owl.carousel.min.js")"></script>
	<script src="@Url.Content("~/js/main.js")"></script>


	<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
	<script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.js"></script>
	<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.7.1/jquery.min.js"></script>






	<!-- AJAX -->
	<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.7.1/jquery.min.js"></script>
}

<head>
	<meta charset="UTF-8">
</head>

<!-- Page Preloder -->
<div id="preloder">
	<div class="loader"></div>
</div>

<!-- Breadcrumb Section Begin -->
<section class="breadcrumb-section set-bg content-below-header"
		 data-setbg="@Url.Content("~/img/banner/blog.jpg")"
		 style="background-image: url('@Url.Content("/img/banner/blog.jpg")'); background-size: cover; background-position: center;">
	<div class="container">
		<div class="row">
			<div class="col-lg-12 text-center">
				<div class="breadcrumb__text">
					<h2>Tạo bài viết</h2>
				</div>
			</div>
		</div>
	</div>
</section>
<!-- Breadcrumb Section End -->
<!-- Checkout Section Begin -->
<section class="checkout spad">
	<div class="container">
		<div class="checkout__form">
			<h4>Chi tiết bài</h4>


			<form method="post" enctype="multipart/form-data">
				<div class="row">
					<div class="col-lg-8 col-md-6">

						<div class="checkout__input">
							<div class="tooltipBar">
								<span class="tooltiptextBar">
									<small>Phải chứa khoảng 10-100 chữ cái</small>
								</span>
								<p>Tiêu đề<span>*</span></p>

							</div>

							<input type="text" name="BlogTitle" value="" minlength="10" maxlength="100" required>
						</div>


						<div class="checkout__input">
							<div class="tooltipBar">
								<span class="tooltiptextBar">
									<small>Phải chứa khoảng 50-1500 chữ cái</small>
								</span>
								<p>Nội Dung<span>*</span></p>

							</div>

							<div id="editor-container"></div>
							<textarea name="BlogContent" id="description" class="d-none" minlength="50" maxlength="1500" required></textarea>
							<small class="form-text text-muted">Cung cấp nội dung chi tiết về quán ăn, món ăn, và trải nghiệm của bạn</small>
						</div>


						<div class="checkout__input">
							<div class="tooltipBar">
								<span class="tooltiptextBar">
									<small>Bắt buộc phải xác định</small>
								</span>
								<p>Địa điểm<span>*</span></p>

							</div>

							@await Html.PartialAsync("Components/location-selection")
						</div>

						<div class="checkout__input">
							<div class="tooltipBar">
								<span class="tooltiptextBar">
									<small>Bắt buộc phải xác định</small>
								</span>
								<p>Địa chỉ cụ thể<span>*</span></p>
							</div>

							<div class="address_input">
								<input type="text" name="EateryAddressDetail" id="addressInput" value="" required>
								<button type="button" id="showMapButton">Hiện Map</button>
							</div>
							<div id="mapContainer" style="display: none; padding-top : 10px"></div>
						</div>


						<div class="row">
							<div class="col-lg-6">
								<div class="checkout__input">
									<div class="tooltipBar">
										<span class="tooltiptextBar">
											<small>Không vượt quá 5 ảnh và chỉ chấp nhận ảnh dạng PNG,JPEG,JPG </small>
										</span>
										<p>Ảnh<span>*</span></p>
									</div>


									<input type="file" id="imageLink" name="BlogImages" multiple="true"
										   onchange="handleMultipleImages(this)" required>

									<div id="image-preview-container-multiple" class="preview-container">
										<div id="image-preview-multiple" class="preview-gallery"></div>
									</div>
								</div>
							</div>
							<div class="col-lg-6">
								<div class="checkout__input">
									<div class="tooltipBar">
										<span class="tooltiptextBar">
											<small>Dùng cho xác minh</small>
										</span>
										<p>Ảnh hóa đơn <sup class="text-danger">*</sup></p>
									</div>


									<input type="file" accept="image/jpeg,image/jpg,image/png,image/gif,image/webp"
										   id="billLink" name="BlogBillImage" onchange="handleSingleImage(this)" required>

									<div id="image-preview-container-bill" class="preview-container">
										<div id="image-preview-single" class="preview-gallery single-image"></div>
									</div>
								</div>
							</div>
						</div>

						<p>(Khi bài viết đã được tạo , vui lòng chờ đội ngũ quán lý xử lí duyệt , quá trình này sẽ mất từ 10p-30p)</p>
					</div>
					<div class="col-lg-4 col-md-6">
						<div class="">
							<div class="tooltipBar">
								<span class="tooltiptextBar">
									<small>Chọn ít nhất 1 trong những cái dưới đây</small>
								</span>
								<strong>Danh Mục<span>*</span></strong>
							</div>

							<div class="meal-type" id="sectionFormMealType">
								<p>Loại bữa ăn</p>
								<table>
									<tbody>
										<tr>
											<td>
												<input type="checkbox" name="meal-type" value="Breakfast"> Ăn sáng<br>
											</td>
											<td>
												<input type="checkbox" name="meal-type" value="Lunch"> Ăn trưa<br>
											</td>
											<td>
												<input type="checkbox" name="meal-type" value="Dinner"> Ăn tối<br>
											</td>
										</tr>
										<tr>
											<td>
												<input type="checkbox" name="meal-type" value="Late Night"> Ăn đêm<br>
											</td>
											<td>
												<input type="checkbox" name="meal-type" value="Brunch"> Ăn giữa trưa-sáng<br>
											</td>
											<td>
												<input type="checkbox" name="meal-type" value="Drink"> Đồ Uống<br>
											</td>
										</tr>
									</tbody>
								</table>
							</div>
							<br>
							<div class="food-type" id="sectionFormFoodType">
								<p>Loại ẩm thực</p>
								<table>
									<tbody>
										<tr>
											<td>
												<input type="checkbox" name="food-type" value="Vietnamese"> Việt<br>
											</td>
											<td>
												<input type="checkbox" name="food-type" value="Chinese"> Trung<br>
											</td>
											<td>
												<input type="checkbox" name="food-type" value="Korean"> Hàn<br>
											</td>
										</tr>
										<tr>
											<td>
												<input type="checkbox" name="food-type" value="Thai"> Thái<br>
											</td>
											<td>
												<input type="checkbox" name="food-type" value="Europe"> Âu<br>
											</td>
											<td>
												<input type="checkbox" name="food-type" value="American"> Mỹ<br>
											</td>
										</tr>
										<tr>
											<td>
												<input type="checkbox" name="food-type" value="Japanese"> Nhật<br>
											</td>
											<td>
												<input type="checkbox" name="food-type" value="Other"> Khác<br>
											</td>
										</tr>
									</tbody>
								</table>
							</div><br>



							<table border="0" width="300">
								<tbody>
									<tr class="category-content">

										<td>
											<div class="tooltipBar">
												<span class="tooltiptextBar">
													<small>Bắt buộc chọn 1 cái</small>
												</span>
												<p>Giá thành</p>
											</div>

										</td>
										<td width="200">
											<select class="category-select" name="price-range" title="Select price range" required>
												<option value=""> Chọn giá </option>
												<option value="$ (>10000 vnd)"> $ (&gt;10000 vnd)</option>
												<option value="$+ (10000 - 50000 vnd)"> $+ (10000 - 50000 vnd)</option>
												<option value="$$ (50001 - 200000 vnd)"> $$ (50001 - 200000 vnd)</option>
												<option value="$$+ (200001 - 500000 vnd)"> $$+ (200001 - 500000 vnd)</option>
												<option value="$$$ (<500000 vnd)"> $$$ (&lt;500000 vnd)</option>
											</select>
										</td>
									</tr>
								</tbody>
							</table>
						</div>
						<br><br>
						<div class="checkout__input">

							<div class="tooltipBar">
								<span class="tooltiptextBar">
									<small>Chọn thang số từ 1 - 5</small>
								</span>
								<strong>Điểm Rate<span>*</span></strong>
							</div>
							<table border="0" width="300">
								<tbody>
									<tr>
										<td>Chất lượng</td>
										<td><input type="number" placeholder="From 1 to 5" class="rate-input" name="foodQuality" id="foodQuality" min="0" max="5" required></td>
									</tr>
									<tr>
										<td>Không gian</td>
										<td><input type="number" placeholder="From 1 to 5" class="rate-input" name="environment" id="environment" min="0" max="5" required></td>
									</tr>
									<tr>
										<td>Giá cả</td>
										<td><input type="number" placeholder="From 1 to 5" class="rate-input" name="pricing" id="pricing" min="0" max="5" required></td>
									</tr>
									<tr>
										<td>Phục vụ</td>
										<td><input type="number" placeholder="From 1 to 5" class="rate-input" name="service" id="service" min="0" max="5" required></td>
									</tr>
									<tr>
										<td>Vệ sinh</td>
										<td><input type="number" placeholder="From 1 to 5" class="rate-input" name="hygiene" id="hygiene" min="0" max="5" required></td>
									</tr>
									<tr>
										<td>Điểm Overall</td>
										<td><input type="number" inputmode="decimal" pattern="[0-9]*[.,]?[0-9]*" class="rate-input" id="overall" name="overall" min="0" max="5" readonly></td>
									</tr>
								</tbody>
							</table>
							<br>

						</div>


						<div class="tooltipBar">
							<span class="tooltiptextBar">
								<small>
									(Bài viết sẽ được hiện thị nhiều hơn và thường xuyên hơn đến người dùng)
								</small>
							</span>
							<p>Phí hiển thị bài viết<span>*</span></p>

						</div><br />


						@if (paidOptions != null)
						{
							@for (int i = 0; i < paidOptions.Count; i++)
							{
								var option = paidOptions[i];
								var isChecked = i == 0; // First option (None) is checked by default

								// Use reflection to get properties from the anonymous object
								var id = option.GetType().GetProperty("Id")?.GetValue(option)?.ToString() ?? "0";
								var amount = option.GetType().GetProperty("Amount")?.GetValue(option)?.ToString() ?? "0";
								var displayText = option.GetType().GetProperty("DisplayText")?.GetValue(option)?.ToString() ?? "";

								<input type="radio"
									   id="displayCost@(i+1)"
									   name="displayCost"
									   value="@amount"
									   data-option-id="@id"
								@(isChecked ? "checked" : "")>
								<label for="displayCost@(i+1)">@displayText</label>

								<br>
							}
						}

						<div class="checkout__order">
							<button id="submitBtn" type="submit" class="site-btn">Tạo bài</button>
						</div>
						<h4 class="text-danger" style="text-align: center; margin-top: 20px"></h4>
					</div>
				</div>

				<style>
					.tooltipBar {
						position: relative;
						display: inline-block;
					}

						/* Tooltip text */
						.tooltipBar .tooltiptextBar {
							visibility: hidden;
							width: 240px;
							background-color: #555;
							color: #fff;
							text-align: center;
							padding: 5px 0;
							border-radius: 6px;
							/* Position the tooltip text */
							position: absolute;
							z-index: 1;
							bottom: 125%;
							left: 50%;
							margin-left: -60px;
							/* Fade in tooltip */
							opacity: 0;
							transition: opacity 0.3s;
						}

							/* Tooltip arrow */
							.tooltipBar .tooltiptextBar::after {
								content: "";
								position: absolute;
								top: 100%;
								left: 50%;
								margin-left: -5px;
								border-width: 5px;
								border-style: solid;
								border-color: #555 transparent transparent transparent;
							}

						/* Show the tooltip text when you mouse over the tooltip container */
						.tooltipBar:hover .tooltiptextBar {
							visibility: visible;
							opacity: 1;
						}
				</style>


			</form>


		</div>
	</div>
</section>

@* TagSection *@

@* <div class="checkout__input"> *@
@*     <p>Tag<sup class="text-danger">(Tùy chọn)</sup></p> *@
@*     <small><sup class="text-danger">Bắt đầu với "#", chứa 1-16 chữ cái , thêm dấu cách giữa tag và KHÔNG khoảng trống giữa tags</sup></small> *@
@*     <div class="tag-container"> *@
@*         <input id="input" onclick="showSearchResults(); searchTag(this);" oninput="searchTag(this)" type="text" name="txt" placeholder="Enter here..." style="width : 500px"> *@
@*         <input id="tags-array" name="tags-array" type="hidden" value=""> *@
@*     </div> *@
@*     <div class="search-tag-container"> *@
@*         <div id="search-tag-content" style="width: 750px; height: 200px; display: none; overflow-y: auto; border: none;"></div><br> *@
@*     </div> *@
@* </div> *@


@* <div class="diet-type">
								<p>Chế độ ăn đặc biệt (Tùy Chọn)</p>
								<table>
									<tbody>
										<tr>
											<td>
												<input type="checkbox" name="special-diet-type" value="Vegan"> Ăn chay <br>
											</td>
											<td>
												<input type="checkbox" name="special-diet-type" value="Glueten-free"> Không Gluten<br>
											</td>
											<td>
												<input type="checkbox" name="special-diet-type" value="Low-fat"> Ít béo<br>
											</td>
										</tr>
										<tr>
											<td>
												<input type="checkbox" name="special-diet-type" value="Diabetic Diet"> Chế độ ăn tiểu đường<br>
											</td>
											<td>
												<input type="checkbox" name="special-diet-type" value="High-protein"> Giàu Protein<br>
											</td>
											<td>
												<input type="checkbox" name="special-diet-type" value="Low-protein"> Ít Protein<br>
											</td>
										</tr>
									</tbody>
								</table>
							</div><br> *@

